library(testthat)
context("Parse Config File")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/readConfig.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/setup.R")
config <- "C:/Users/twuma/FettweisLab/fastq2otu/inst/example-config.yml"
options <- yaml::yaml.load_file(config)
source("C:/Users/twuma/FettweisLab/fastq2otu/R/readConfig.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/setup.R")
config <- "C:/Users/twuma/FettweisLab/fastq2otu/inst/example-config.yml"
options <- yaml::yaml.load_file(config)
test_that("Create fastSingle object", {
object <- readConfig(config, isPaired = FALSE, type = "auto")
expect_true(!is.null(object))
})
getwd()
library(testthat)
context("Assigning Taxonomy")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/readConfig.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/assignSeqTaxonomy.R")
# Provide path to config file
config <- "C:/Users/twuma/FettweisLab/fastq2otu/inst/example-config.yml"
options <- yaml::yaml.load_file(config)
# Update options to test
options@taxDatabase <- "C:/Users/twuma/Downloads/silva_v138_lpsn_accession_matches_v1v4_primersearched_taxa.fa"
# Update options to test
options$taxDatabase <- "C:/Users/twuma/Downloads/silva_v138_lpsn_accession_matches_v1v4_primersearched_taxa.fa"
options$outDir <- "C:/Users/twuma/Downloads/"
# Custruct sequence table (uses DADA2's built in dataset)
derep1 <- derepFastq(system.file("extdata", "sam1F.fastq.gz", package="dada2"))
derep2 <- derepFastq(system.file("extdata", "sam2F.fastq.gz", package="dada2"))
dada1 <- dada(derep1, tperr1)
dada2 <- dada(derep2, tperr1)
makeSequenceTable(list(sample1=dada1, sample2=dada2))
library(dada2)
install.packages("BiocManager")
BiocManager::install("dada2")
library(dada2)
install.package("latticeExtra")
install.packages("latticeExtra")
library(dada2)
devtools::install_version("latticeExtra", version = "0.6-28")
version
packageVersion("dada2")
library(testthat)
library(dada2) # Install using BiocManager --- installed latticeExtra using devtools::install_version("latticeExtra", version = "0.6-28")
context("Assigning Taxonomy")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/readConfig.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/assignSeqTaxonomy.R")
# Provide path to config file
config <- "C:/Users/twuma/FettweisLab/fastq2otu/inst/example-config.yml"
options <- yaml::yaml.load_file(config)
# Update options to test
options$taxDatabase <- "C:/Users/twuma/Downloads/silva_v138_lpsn_accession_matches_v1v4_primersearched_taxa.fa"
options$outDir <- "C:/Users/twuma/Downloads/"
# Custruct sequence table (uses DADA2's built in dataset)
derep1 <- derepFastq(system.file("extdata", "sam1F.fastq.gz", package="dada2"))
derep2 <- derepFastq(system.file("extdata", "sam2F.fastq.gz", package="dada2"))
dada1 <- dada(derep1, tperr1)
dada2 <- dada(derep2, tperr1)
seqtab <- dada2::makeSequenceTable(list(sample1=dada1, sample2=dada2))
# Perform Tests
test_that("Assign taxonomy using custom database", {
object <- readConfig(config, type = "assignTax")
assignSeqTaxonomy()
expect_true(!is.null(object))
})
object <- readConfig(config, type = "assignTax")
readConfig(config, type = "assignTax")
readConfig(config, type = "assignTax")
readConfig(config, type = "assignTax")
readConfig(config, type = "assignTax")
readConfig(config, type = "assignTax")
# Provide path to config file
config <- "C:/Users/twuma/FettweisLab/fastq2otu/inst/example-config.yml"
library(testthat)
library(dada2) # Install using BiocManager --- installed latticeExtra using devtools::install_version("latticeExtra", version = "0.6-28")
context("Assigning Taxonomy")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/readConfig.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/assignSeqTaxonomy.R")
# Provide path to config file
config <- "C:/Users/twuma/FettweisLab/fastq2otu/inst/example-config.yml"
options <- yaml::yaml.load_file(config)
# Update options to test
options$taxDatabase <- "C:/Users/twuma/Downloads/silva_v138_lpsn_accession_matches_v1v4_primersearched_taxa.fa"
options$outDir <- "C:/Users/twuma/Downloads/"
# Custruct sequence table (uses DADA2's built in dataset)
derep1 <- derepFastq(system.file("extdata", "sam1F.fastq.gz", package="dada2"))
derep2 <- derepFastq(system.file("extdata", "sam2F.fastq.gz", package="dada2"))
dada1 <- dada(derep1, tperr1)
dada2 <- dada(derep2, tperr1)
seqtab <- dada2::makeSequenceTable(list(sample1=dada1, sample2=dada2))
object <- readConfig(config, type = "assignTax")
object <- readConfig(config, type = "assignTax")
object <- readConfig(config, type = "assignTax")
object <- readConfig(config, type = "assignTax")
object <- readConfig(config, type = "assignTax")
object <- readConfig(config, type = "assignTax")
library(testthat)
library(dada2) # Install using BiocManager --- installed latticeExtra using devtools::install_version("latticeExtra", version = "0.6-28")
context("Assigning Taxonomy")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/readConfig.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/assignSeqTaxonomy.R")
# Provide path to config file
config <- "C:/Users/twuma/FettweisLab/fastq2otu/inst/example-config.yml"
options <- yaml::yaml.load_file(config)
# Update options to test
options$taxDatabase <- "C:/Users/twuma/Downloads/silva_v138_lpsn_accession_matches_v1v4_primersearched_taxa.fa"
options$outDir <- "C:/Users/twuma/Downloads/"
# Custruct sequence table (uses DADA2's built in dataset)
derep1 <- derepFastq(system.file("extdata", "sam1F.fastq.gz", package="dada2"))
derep2 <- derepFastq(system.file("extdata", "sam2F.fastq.gz", package="dada2"))
dada1 <- dada(derep1, tperr1)
dada2 <- dada(derep2, tperr1)
seqtab <- dada2::makeSequenceTable(list(sample1=dada1, sample2=dada2))
readConfig(config, type = "assignTax")
readConfig(config, type = "assignTax")
file.exists("C:/Users/twuma/Downloads/silva_v138_lpsn_accession_matches_v1v4_primersearched_taxa.fa")
readConfig(config, type = "assignTax")
readConfig(config, type = "assignTax")
readConfig(config, type = "assignTax")
readConfig(config, isPaired = TRUE, type = "auto")
readConfig(config, type = "assignTax")
setFastAssignTaxa(refDatabase = options$taxDatabase,
prefix = ifelse(!is.null(options$projectPrefix), options$projectPrefix, "myproject"),
minBootstrap = ifelse(!is.null(options$assignTaxMinBootstrap), as.numeric(as.character(options$assignTaxMinBootstrap)), 50),
tryComplement = ifelse(!is.null(options$assignTaxTryComplement), options$assignTaxTryComplement, FALSE),
showBootstraps = ifelse(!is.null(options$assignTaxOutputBootstraps), options$assignTaxOutputBootstraps, FALSE),
taxLevels = ifelse(!is.null(options$assignTaxLevels), options$assignTaxLevels, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")),
verbose = ifelse(!is.null(options$verbose), options$verbose, FALSE),
multithread = ifelse(!is.null(options$multithread), options$multithread, FALSE))
options$taxDatabase
ifelse(!is.null(options$projectPrefix), options$projectPrefix, "myproject"),
ifelse(!is.null(options$projectPrefix), options$projectPrefix, "myproject")
ifelse(!is.null(options$assignTaxMinBootstrap), as.numeric(as.character(options$assignTaxMinBootstrap)), 50)
setFastAssignTaxa(refDatabase = options$taxDatabase,
prefix = ifelse(!is.null(options$projectPrefix), options$projectPrefix, "myproject"),
minBootstrap = ifelse(!is.null(options$assignTaxMinBootstrap), as.numeric(as.character(options$assignTaxMinBootstrap)), 50),
tryComplement = ifelse(!is.null(options$assignTaxTryComplement), options$assignTaxTryComplement, FALSE),
showBootstraps = ifelse(!is.null(options$assignTaxOutputBootstraps), options$assignTaxOutputBootstraps, FALSE),
taxLevels = ifelse(!is.null(options$assignTaxLevels), options$assignTaxLevels, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")),
verbose = ifelse(!is.null(options$verbose), options$verbose, FALSE),
multithread = ifelse(!is.null(options$multithread), options$multithread, FALSE))
options$taxDatabase,
options$taxDatabase
library(testthat)
library(dada2) # Install using BiocManager --- installed latticeExtra using devtools::install_version("latticeExtra", version = "0.6-28")
context("Assigning Taxonomy")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/readConfig.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/assignSeqTaxonomy.R")
# Provide path to config file
config <- "C:/Users/twuma/FettweisLab/fastq2otu/inst/example-config.yml"
options <- yaml::yaml.load_file(config)
# Update options to test
options$taxDatabase <- "C:/Users/twuma/Downloads/silva_v138_lpsn_accession_matches_v1v4_primersearched_taxa.fa"
options$outDir <- "C:/Users/twuma/Downloads/"
# Custruct sequence table (uses DADA2's built in dataset)
derep1 <- derepFastq(system.file("extdata", "sam1F.fastq.gz", package="dada2"))
derep2 <- derepFastq(system.file("extdata", "sam2F.fastq.gz", package="dada2"))
dada1 <- dada(derep1, tperr1)
dada2 <- dada(derep2, tperr1)
seqtab <- dada2::makeSequenceTable(list(sample1=dada1, sample2=dada2))
setFastAssignTaxa(refDatabase = options$taxDatabase,
prefix = ifelse(!is.null(options$projectPrefix), options$projectPrefix, "myproject"),
minBootstrap = ifelse(!is.null(options$assignTaxMinBootstrap), as.numeric(as.character(options$assignTaxMinBootstrap)), 50),
tryComplement = ifelse(!is.null(options$assignTaxTryComplement), options$assignTaxTryComplement, FALSE),
showBootstraps = ifelse(!is.null(options$assignTaxOutputBootstraps), options$assignTaxOutputBootstraps, FALSE),
taxLevels = ifelse(!is.null(options$assignTaxLevels), options$assignTaxLevels, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")),
verbose = ifelse(!is.null(options$verbose), options$verbose, FALSE),
multithread = ifelse(!is.null(options$multithread), options$multithread, FALSE))
setFastAssignTaxa(refDatabase = options$taxDatabase,
prefix = ifelse(!is.null(options$projectPrefix), options$projectPrefix, "myproject"),
minBootstrap = ifelse(!is.null(options$assignTaxMinBootstrap), as.numeric(as.character(options$assignTaxMinBootstrap)), 50),
tryComplement = ifelse(!is.null(options$assignTaxTryComplement), options$assignTaxTryComplement, FALSE),
showBootstraps = ifelse(!is.null(options$assignTaxOutputBootstraps), options$assignTaxOutputBootstraps, FALSE),
taxLevels = ifelse(!is.null(options$assignTaxLevels), options$assignTaxLevels, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")),
verbose = ifelse(!is.null(options$verbose), options$verbose, FALSE),
multithread = ifelse(!is.null(options$multithread), options$multithread, FALSE))
options$taxDatabase
setFastAssignTaxa(refDatabase = options$taxDatabase,
prefix = ifelse(!is.null(options$projectPrefix), options$projectPrefix, "myproject"),
minBootstrap = ifelse(!is.null(options$assignTaxMinBootstrap), as.numeric(as.character(options$assignTaxMinBootstrap)), 50),
tryComplement = ifelse(!is.null(options$assignTaxTryComplement), options$assignTaxTryComplement, FALSE),
showBootstraps = ifelse(!is.null(options$assignTaxOutputBootstraps), options$assignTaxOutputBootstraps, FALSE),
taxLevels = ifelse(!is.null(options$assignTaxLevels), options$assignTaxLevels, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")),
verbose = ifelse(!is.null(options$verbose), options$verbose, FALSE),
multithread = ifelse(!is.null(options$multithread), options$multithread, FALSE))
setFastAssignTaxa(refDatabase = options$taxDatabase,
prefix = ifelse(!is.null(options$projectPrefix), options$projectPrefix, "myproject"),
minBootstrap = ifelse(!is.null(options$assignTaxMinBootstrap), as.numeric(as.character(options$assignTaxMinBootstrap)), 50),
tryComplement = ifelse(!is.null(options$assignTaxTryComplement), options$assignTaxTryComplement, FALSE),
showBootstraps = ifelse(!is.null(options$assignTaxOutputBootstraps), options$assignTaxOutputBootstraps, FALSE),
taxLevels = ifelse(!is.null(options$assignTaxLevels), options$assignTaxLevels, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")),
verbose = ifelse(!is.null(options$verbose), options$verbose, FALSE),
multithread = ifelse(!is.null(options$multithread), options$multithread, FALSE))
setFastAssignTaxa(refDatabase = options$taxDatabase,
prefix = ifelse(!is.null(options$projectPrefix), options$projectPrefix, "myproject"),
minBootstrap = ifelse(!is.null(options$assignTaxMinBootstrap), as.numeric(as.character(options$assignTaxMinBootstrap)), 50),
tryComplement = ifelse(!is.null(options$assignTaxTryComplement), options$assignTaxTryComplement, FALSE),
showBootstraps = ifelse(!is.null(options$assignTaxOutputBootstraps), options$assignTaxOutputBootstraps, FALSE),
taxLevels = ifelse(!is.null(options$assignTaxLevels), options$assignTaxLevels, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")),
verbose = ifelse(!is.null(options$verbose), options$verbose, FALSE),
multithread = ifelse(!is.null(options$multithread), options$multithread, FALSE))
setFastAssignTaxa(refDatabase = options$taxDatabase,
prefix = ifelse(!is.null(options$projectPrefix), options$projectPrefix, "myproject"),
minBootstrap = ifelse(!is.null(options$assignTaxMinBootstrap), as.numeric(as.character(options$assignTaxMinBootstrap)), 50),
tryComplement = ifelse(!is.null(options$assignTaxTryComplement), options$assignTaxTryComplement, FALSE),
showBootstraps = ifelse(!is.null(options$assignTaxOutputBootstraps), options$assignTaxOutputBootstraps, FALSE),
taxLevels = ifelse(!is.null(options$assignTaxLevels), options$assignTaxLevels, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")),
verbose = ifelse(!is.null(options$verbose), options$verbose, FALSE),
multithread = ifelse(!is.null(options$multithread), options$multithread, FALSE))
readConfig(config, type = "assignTax")
readConfig(config, type = "assignTax")
library(testthat)
library(dada2) # Install using BiocManager --- installed latticeExtra using devtools::install_version("latticeExtra", version = "0.6-28")
context("Assigning Taxonomy")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/readConfig.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/assignSeqTaxonomy.R")
# Provide path to config file
config <- "C:/Users/twuma/FettweisLab/fastq2otu/inst/example-config.yml"
options <- yaml::yaml.load_file(config)
# Update options to test
options$taxDatabase <- "C:/Users/twuma/Downloads/silva_v138_lpsn_accession_matches_v1v4_primersearched_taxa.fa"
options$outDir <- "C:/Users/twuma/Downloads/"
# Custruct sequence table (uses DADA2's built in dataset)
derep1 <- derepFastq(system.file("extdata", "sam1F.fastq.gz", package="dada2"))
derep2 <- derepFastq(system.file("extdata", "sam2F.fastq.gz", package="dada2"))
dada1 <- dada(derep1, tperr1)
dada2 <- dada(derep2, tperr1)
seqtab <- dada2::makeSequenceTable(list(sample1=dada1, sample2=dada2))
readConfig(config, type = "assignTax")
readConfig(config, type = "assignTax")
readConfig(config, type = "assignTax")
library(testthat)
library(dada2) # Install using BiocManager --- installed latticeExtra using devtools::install_version("latticeExtra", version = "0.6-28")
context("Assigning Taxonomy")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/readConfig.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/assignSeqTaxonomy.R")
# Provide path to config file
config <- "C:/Users/twuma/FettweisLab/fastq2otu/inst/example-config.yml"
options2 <- yaml::yaml.load_file(config)
# Update options to test
options2$taxDatabase <- "C:/Users/twuma/Downloads/silva_v138_lpsn_accession_matches_v1v4_primersearched_taxa.fa"
options2$outDir <- "C:/Users/twuma/Downloads/"
# Custruct sequence table (uses DADA2's built in dataset)
derep1 <- derepFastq(system.file("extdata", "sam1F.fastq.gz", package="dada2"))
derep2 <- derepFastq(system.file("extdata", "sam2F.fastq.gz", package="dada2"))
dada1 <- dada(derep1, tperr1)
dada2 <- dada(derep2, tperr1)
seqtab <- dada2::makeSequenceTable(list(sample1=dada1, sample2=dada2))
readConfig(config, type = "assignTax")
# Provide path to config file
config <- "C:/Users/twuma/FettweisLab/fastq2otu/inst/example-config.yml"
options <- yaml::yaml.load_file(config)
# Update options to test
options$taxDatabase <- "C:/Users/twuma/Downloads/silva_v138_lpsn_accession_matches_v1v4_primersearched_taxa.fa"
options$outDir <- "C:/Users/twuma/Downloads/"
setFastAssignTaxa(refDatabase = options$taxDatabase,
prefix = ifelse(!is.null(options$projectPrefix), options$projectPrefix, "myproject"),
minBootstrap = ifelse(!is.null(options$assignTaxMinBootstrap), as.numeric(as.character(options$assignTaxMinBootstrap)), 50),
tryComplement = ifelse(!is.null(options$assignTaxTryComplement), options$assignTaxTryComplement, FALSE),
showBootstraps = ifelse(!is.null(options$assignTaxOutputBootstraps), options$assignTaxOutputBootstraps, FALSE),
taxLevels = ifelse(!is.null(options$assignTaxLevels), options$assignTaxLevels, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")),
verbose = ifelse(!is.null(options$verbose), options$verbose, FALSE),
multithread = ifelse(!is.null(options$multithread), options$multithread, FALSE))
options$taxDatabase
ifelse(!is.null(options$projectPrefix), options$projectPrefix, "myproject")
ifelse(!is.null(options$assignTaxMinBootstrap), as.numeric(as.character(options$assignTaxMinBootstrap)), 50)
ifelse(!is.null(options$assignTaxTryComplement), options$assignTaxTryComplement, FALSE)
ifelse(!is.null(options$assignTaxOutputBootstraps), options$assignTaxOutputBootstraps, FALSE)
ifelse(!is.null(options$verbose), options$verbose, FALSE)
source("C:/Users/twuma/FettweisLab/fastq2otu/R/readConfig.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/assignSeqTaxonomy.R")
setFastAssignTaxa(refDatabase = options$taxDatabase,
prefix = ifelse(!is.null(options$projectPrefix), options$projectPrefix, "myproject"),
minBootstrap = ifelse(!is.null(options$assignTaxMinBootstrap), as.numeric(as.character(options$assignTaxMinBootstrap)), 50),
tryComplement = ifelse(!is.null(options$assignTaxTryComplement), options$assignTaxTryComplement, FALSE),
showBootstraps = ifelse(!is.null(options$assignTaxOutputBootstraps), options$assignTaxOutputBootstraps, FALSE),
taxLevels = ifelse(!is.null(options$assignTaxLevels), options$assignTaxLevels, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")),
verbose = ifelse(!is.null(options$verbose), options$verbose, FALSE),
multithread = ifelse(!is.null(options$multithread), options$multithread, FALSE))
View(assignSeqTaxonomy)
devtools::session_info()
detach("package:dada2", unload=TRUE)
setFastAssignTaxa(refDatabase = options$taxDatabase,
prefix = ifelse(!is.null(options$projectPrefix), options$projectPrefix, "myproject"),
minBootstrap = ifelse(!is.null(options$assignTaxMinBootstrap), as.numeric(as.character(options$assignTaxMinBootstrap)), 50),
tryComplement = ifelse(!is.null(options$assignTaxTryComplement), options$assignTaxTryComplement, FALSE),
showBootstraps = ifelse(!is.null(options$assignTaxOutputBootstraps), options$assignTaxOutputBootstraps, FALSE),
taxLevels = ifelse(!is.null(options$assignTaxLevels), options$assignTaxLevels, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")),
verbose = ifelse(!is.null(options$verbose), options$verbose, FALSE),
multithread = ifelse(!is.null(options$multithread), options$multithread, FALSE))
source("C:/Users/twuma/FettweisLab/fastq2otu/R/readConfig.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/assignSeqTaxonomy.R")
# Provide path to config file
config <- "C:/Users/twuma/FettweisLab/fastq2otu/inst/example-config.yml"
options <- yaml::yaml.load_file(config)
# Update options to test
options$taxDatabase <- "C:/Users/twuma/Downloads/silva_v138_lpsn_accession_matches_v1v4_primersearched_taxa.fa"
options$outDir <- "C:/Users/twuma/Downloads/"
# Custruct sequence table (uses DADA2's built in dataset)
derep1 <- derepFastq(system.file("extdata", "sam1F.fastq.gz", package="dada2"))
derep2 <- derepFastq(system.file("extdata", "sam2F.fastq.gz", package="dada2"))
dada1 <- dada(derep1, tperr1)
dada2 <- dada(derep2, tperr1)
seqtab <- dada2::makeSequenceTable(list(sample1=dada1, sample2=dada2))
object <- setFastAssignTaxa(refDatabase = options$taxDatabase,
prefix = ifelse(!is.null(options$projectPrefix), options$projectPrefix, "myproject"),
minBootstrap = ifelse(!is.null(options$assignTaxMinBootstrap), as.numeric(as.character(options$assignTaxMinBootstrap)), 50),
tryComplement = ifelse(!is.null(options$assignTaxTryComplement), options$assignTaxTryComplement, FALSE),
showBootstraps = ifelse(!is.null(options$assignTaxOutputBootstraps), options$assignTaxOutputBootstraps, FALSE),
taxLevels = ifelse(!is.null(options$assignTaxLevels), options$assignTaxLevels, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")),
verbose = ifelse(!is.null(options$verbose), options$verbose, FALSE),
multithread = ifelse(!is.null(options$multithread), options$multithread, FALSE))
assignSeqTaxonomy(seqtab, object)
readConfig(config, type = "assignTax")
readConfig(config, type = "assignTax")
assignSeqTaxonomy(seqtab, object)
readConfig(config, type = "assignTax")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/readConfig.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/assignSeqTaxonomy.R")
# Provide path to config file
config <- "C:/Users/twuma/FettweisLab/fastq2otu/inst/example-config.yml"
options <- yaml::yaml.load_file(config)
# Update options to test
options$taxDatabase <- "C:/Users/twuma/Downloads/silva_v138_lpsn_accession_matches_v1v4_primersearched_taxa.fa"
options$outDir <- "C:/Users/twuma/Downloads/"
# Custruct sequence table (uses DADA2's built in dataset)
derep1 <- derepFastq(system.file("extdata", "sam1F.fastq.gz", package="dada2"))
derep2 <- derepFastq(system.file("extdata", "sam2F.fastq.gz", package="dada2"))
dada1 <- dada(derep1, tperr1)
dada2 <- dada(derep2, tperr1)
seqtab <- dada2::makeSequenceTable(list(sample1=dada1, sample2=dada2))
readConfig(config, type = "assignTax")
config
readConfig(config, type = "assignTax")
devtools::load_all()
# Provide path to config file
config <- "C:/Users/twuma/FettweisLab/fastq2otu/inst/example-config.yml"
options <- yaml::yaml.load_file(config)
# Update options to test
options$taxDatabase <- "C:/Users/twuma/Downloads/silva_v138_lpsn_accession_matches_v1v4_primersearched_taxa.fa"
options$outDir <- "C:/Users/twuma/Downloads/"
# Custruct sequence table (uses DADA2's built in dataset)
derep1 <- derepFastq(system.file("extdata", "sam1F.fastq.gz", package="dada2"))
derep2 <- derepFastq(system.file("extdata", "sam2F.fastq.gz", package="dada2"))
dada1 <- dada(derep1, tperr1)
dada2 <- dada(derep2, tperr1)
seqtab <- dada2::makeSequenceTable(list(sample1=dada1, sample2=dada2))
readConfig(config, type = "assignTax")
setFastAssignTaxa(refDatabase = options$taxDatabase,
prefix = ifelse(!is.null(options$projectPrefix), options$projectPrefix, "myproject"),
minBootstrap = ifelse(!is.null(options$assignTaxMinBootstrap), as.numeric(as.character(options$assignTaxMinBootstrap)), 50),
tryComplement = ifelse(!is.null(options$assignTaxTryComplement), options$assignTaxTryComplement, FALSE),
showBootstraps = ifelse(!is.null(options$assignTaxOutputBootstraps), options$assignTaxOutputBootstraps, FALSE),
taxLevels = ifelse(!is.null(options$assignTaxLevels), options$assignTaxLevels, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")),
verbose = ifelse(!is.null(options$verbose), options$verbose, FALSE),
multithread = ifelse(!is.null(options$multithread), options$multithread, FALSE))
options$taxDatabase
methods::new("fastAssignTaxa",
projectPrefix = ifelse(!is.null(options$projectPrefix), options$projectPrefix, "myproject"),
taxDatabase = refDatabase,
assignTaxMinBootstrap = ifelse(!is.null(options$assignTaxMinBootstrap), as.numeric(as.character(options$assignTaxMinBootstrap)), 50),
assignTaxTryComplement = ifelse(!is.null(options$assignTaxTryComplement), options$assignTaxTryComplement, FALSE),
assignTaxOutputBootstraps = ifelse(!is.null(options$assignTaxOutputBootstraps), options$assignTaxOutputBootstraps, FALSE),
assignTaxLevels = ifelse(!is.null(options$assignTaxLevels), options$assignTaxLevels, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")),
assignTaxMultiThread = ifelse(!is.null(options$multithread), options$multithread, FALSE),
assignTaxVerbose = verbose)
methods::new("fastAssignTaxa",
projectPrefix = ifelse(!is.null(options$projectPrefix), options$projectPrefix, "myproject"),
taxDatabase = options$taxDatabase
assignTaxMinBootstrap = ifelse(!is.null(options$assignTaxMinBootstrap), as.numeric(as.character(options$assignTaxMinBootstrap)), 50),
assignTaxTryComplement = ifelse(!is.null(options$assignTaxTryComplement), options$assignTaxTryComplement, FALSE),
assignTaxOutputBootstraps = ifelse(!is.null(options$assignTaxOutputBootstraps), options$assignTaxOutputBootstraps, FALSE),
assignTaxLevels = ifelse(!is.null(options$assignTaxLevels), options$assignTaxLevels, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")),
assignTaxMultiThread = ifelse(!is.null(options$multithread), options$multithread, FALSE),
assignTaxVerbose = verbose)
methods::new("fastAssignTaxa",
projectPrefix = ifelse(!is.null(options$projectPrefix), options$projectPrefix, "myproject"),
taxDatabase = options$taxDatabase,
assignTaxMinBootstrap = ifelse(!is.null(options$assignTaxMinBootstrap), as.numeric(as.character(options$assignTaxMinBootstrap)), 50),
assignTaxTryComplement = ifelse(!is.null(options$assignTaxTryComplement), options$assignTaxTryComplement, FALSE),
assignTaxOutputBootstraps = ifelse(!is.null(options$assignTaxOutputBootstraps), options$assignTaxOutputBootstraps, FALSE),
assignTaxLevels = ifelse(!is.null(options$assignTaxLevels), options$assignTaxLevels, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")),
assignTaxMultiThread = ifelse(!is.null(options$multithread), options$multithread, FALSE),
assignTaxVerbose = options$verbose)
methods::new("fastAssignTaxa",
projectPrefix = ifelse(!is.null(options$projectPrefix), options$projectPrefix, "myproject"),
taxDatabase = options$taxDatabase,
assignTaxMinBootstrap = ifelse(!is.null(options$assignTaxMinBootstrap), as.numeric(as.character(options$assignTaxMinBootstrap)), 50),
assignTaxTryComplement = ifelse(!is.null(options$assignTaxTryComplement), options$assignTaxTryComplement, FALSE),
assignTaxOutputBootstraps = ifelse(!is.null(options$assignTaxOutputBootstraps), options$assignTaxOutputBootstraps, FALSE),
assignTaxLevels = ifelse(!is.null(options$assignTaxLevels), options$assignTaxLevels, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")),
assignTaxMultiThread = ifelse(!is.null(options$multithread), options$multithread, FALSE),
assignTaxVerbose = options$verbose)
