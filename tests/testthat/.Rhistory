errN = ifelse(!is.null(options$errN), options$errN, 1e+08),
getChimeraTable = ifelse(!is.null(options$createChimeraDetectionTable), options$createChimeraDetectionTable, FALSE),
getErrPDF = ifelse(!is.null(options$saveErrorsPlot), options$saveErrorsPlot, FALSE),
ignoreNegatives = ifelse(!is.null(options$chimeraDetectionIgnoreNegatives), options$chimeraDetectionIgnoreNegatives, 1),
inDir = options$pathToData,
isPaired = TRUE,
justConcatenate = ifelse(!is.null(options$mergePairsJustConcatenate), options$mergePairsJustConcatenate FALSE),
maxMismatch = ifelse(!is.null(options$mergePairsMaxMismatch), options$mergePairsMaxMismatch, 0),
maxShift = ifelse(!is.null(options$chimeraDetectionMaxShift), options$chimeraDetectionMaxShift, 16),
mergeSeqs = ifelse(!is.null(options$mergePairs), options$mergePairs, FALSE),
minFoldParentOverAbundance = ifelse(!is.null(options$chimeraDetectionMinFoldParentOverabundance), options$chimeraDetectionMinFoldParentOverabundance, 1.5),
minOverlap = ifelse(!is.null(options$mergePairsMinOverlap), options$mergePairsMinOverlap, 12),
minSampleFraction = ifelse(!is.null(options$chimeraDetectionMinSampleFraction), options$chimeraDetectionMinSampleFraction, 0.9),
multithread = ifelse(!is.null(options$multithread), options$multithread, FALSE),
outDir = options$outDir,
prefix = ifelse(!is.null(options$projectPrefix), options$projectPrefix, "myproject"),
returnRejects = ifelse(!is.null(options$mergePairsReturnRejects), options$mergePairsReturnRejects, FALSE),
trimOverhang = ifelse(!is.null(options$mergePairsTrimOverhang), options$mergePairsTrimOverhang, FALSE),
verbose = ifelse(!is.null(options$verbose), options$verbose, FALSE),
maxEE = ifelse(!is.null(options$filtMaxEE), options$filtMaxEE, c(2.5, 2.5)),
truncQ = ifelse(!is.null(options$filtTruncQ), options$filtTruncQ, c(0, 0)),
truncLen = ifelse(!is.null(options$filtTruncLen), options$filtTruncLen, c(0, 0)),
trimLeft = ifelse(!is.null(options$filtTrimLeft), options$filtTrimLeft, c(0, 0)),
trimRight = ifelse(!is.null(options$filtTrimRight), options$filtTrimRight, c(0, 0)),
matchIDs = ifelse(!is.null(options$filtMatchIDs), options$filtMatchIDs, FALSE),
minLen = ifelse(!is.null(options$filtMinLen), options$filtMinLen, c(50, 50)))
}
else {
stop("Invalid input provided for type parameter")
}
}
else if (type == "auto" & isPaired) {
# fastPaired object is created
temp <- setFastPaired(inDir = options$pathToData,
outDir = options$outDir,
mergeSeqs = ifelse(!is.null(options$mergePairs), options$mergePairs, FALSE),
trimOverhang = ifelse(!is.null(options$mergePairsTrimOverhang), options$mergePairsTrimOverhang, FALSE),
minOverlap = ifelse(!is.null(options$mergePairsMinOverlap), options$mergePairsMinOverlap, 12),
maxMismatch = ifelse(!is.null(options$mergePairsMaxMismatch), options$mergePairsMaxMismatch, 0),
returnRejects = ifelse(!is.null(options$mergePairsReturnRejects), options$mergePairsReturnRejects, FALSE),
justConcatenate = ifelse(!is.null(options$mergePairsJustConcatenate), options$mergePairsJustConcatenate FALSE),
verbose = ifelse(!is.null(options$verbose), options$verbose, FALSE),
prefix = ifelse(!is.null(options$projectPrefix), options$projectPrefix, "myproject"),
isPaired = TRUE,
derepN = ifelse(!is.null(options$derepN), options$derepN, FALSE),
getErrPDF = ifelse(!is.null(options$saveErrorsPlot), options$saveErrorsPlot, FALSE),
errN = ifelse(!is.null(options$errN), options$errN, 1e+08),
multithread = ifelse(!is.null(options$multithread), options$multithread, FALSE),
dadaBandSize = ifelse(!is.null(options$dadaBandSize), options$dadaBandSize, 16),
dadaOmegaA = ifelse(!is.null(options$dadaOmegaA), options$dadaOmegaA, 1e-40),
getChimeraTable = ifelse(!is.null(options$createChimeraDetectionTable), options$createChimeraDetectionTable, FALSE),
minSampleFraction = ifelse(!is.null(options$chimeraDetectionMinSampleFraction), options$chimeraDetectionMinSampleFraction, 0.9),
ignoreNegatives = ifelse(!is.null(options$chimeraDetectionIgnoreNegatives), options$chimeraDetectionIgnoreNegatives, 1),
minFoldParentOverAbundance = ifelse(!is.null(options$chimeraDetectionMinFoldParentOverabundance), options$chimeraDetectionMinFoldParentOverabundance, 1.5),
detectionAbundance = ifelse(!is.null(options$chimeraDetectionParentAbundance), options$chimeraDetectionParentAbundance, 2),
allowOneOff = ifelse(!is.null(options$chimeraDetectionAllowOneOff), options$chimeraDetectionAllowOneOff, FALSE),
maxShift = ifelse(!is.null(options$chimeraDetectionMaxShift), options$chimeraDetectionMaxShift, 16))
}
else if (type == "auto" & !isPaired) {
temp <- setFastSingle(inDir = options$pathToData,
outDir = options$outDir,
verbose = ifelse(!is.null(options$verbose), options$verbose, FALSE),
prefix = ifelse(!is.null(options$projectPrefix), options$projectPrefix, "myproject"),
isPaired = FALSE,
derepN = ifelse(!is.null(options$derepN), options$derepN, FALSE),
getErrPDF = ifelse(!is.null(options$saveErrorsPlot), options$saveErrorsPlot, FALSE),
errN = ifelse(!is.null(options$errN), options$errN, 1e+08),
multithread = ifelse(!is.null(options$multithread), options$multithread, FALSE),
dadaBandSize = ifelse(!is.null(options$dadaBandSize), options$dadaBandSize, 16),
dadaOmegaA = ifelse(!is.null(options$dadaOmegaA), options$dadaOmegaA, 1e-40),
getChimeraTable = ifelse(!is.null(options$createChimeraDetectionTable), options$createChimeraDetectionTable, FALSE),
minSampleFraction = ifelse(!is.null(options$chimeraDetectionMinSampleFraction), options$chimeraDetectionMinSampleFraction, 0.9),
ignoreNegatives = ifelse(!is.null(options$chimeraDetectionIgnoreNegatives), options$chimeraDetectionIgnoreNegatives, 1),
minFoldParentOverAbundance = ifelse(!is.null(options$chimeraDetectionMinFoldParentOverabundance), options$chimeraDetectionMinFoldParentOverabundance, 1.5),
detectionAbundance = ifelse(!is.null(options$chimeraDetectionParentAbundance), options$chimeraDetectionParentAbundance, 2),
allowOneOff = ifelse(!is.null(options$chimeraDetectionAllowOneOff), options$chimeraDetectionAllowOneOff, FALSE),
maxShift = ifelse(!is.null(options$chimeraDetectionMaxShift), options$chimeraDetectionMaxShift, 16))
}
if ((type == "assignTax" | "assignTax" %in% type) & !isPaired) {
if (length(type) == 1) {
temp <- setFastAssignTaxa(refDatabase = options$taxDatabase,
prefix = ifelse(!is.null(options$projectPrefix), options$projectPrefix, "myproject"),
minBootstrap = ifelse(!is.null(options$assignTaxMinBootstrap), options$assignTaxMinBootstrap, 50),
tryComplement = ifelse(!is.null(options$assignTaxTryComplement), options$assignTaxTryComplement, FALSE),
showBootstraps = ifelse(!is.null(options$assignTaxOutputBootstraps), options$assignTaxOutputBootstraps, FALSE),
taxLevels = ifelse(!is.null(options$assignTaxLevels), options$assignTaxLevels, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")),
verbose = ifelse(!is.null(options$verbose), options$verbose, FALSE),
multithread = ifelse(!is.null(options$multithread), options$multithread, FALSE))
}
else if ("auto" %in% type & length(type) == 2) {
temp <- setFastSingle(inDir = options$pathToData,
outDir = options$outDir,
verbose = ifelse(!is.null(options$verbose), options$verbose, FALSE),
prefix = ifelse(!is.null(options$projectPrefix), options$projectPrefix, "myproject"),
isPaired = FALSE,
derepN = ifelse(!is.null(options$derepN), options$derepN, FALSE),
getErrPDF = ifelse(!is.null(options$saveErrorsPlot), options$saveErrorsPlot, FALSE),
errN = ifelse(!is.null(options$errN), options$errN, 1e+08),
multithread = ifelse(!is.null(options$multithread), options$multithread, FALSE),
dadaBandSize = ifelse(!is.null(options$dadaBandSize), options$dadaBandSize, 16),
dadaOmegaA = ifelse(!is.null(options$dadaOmegaA), options$dadaOmegaA, 1e-40),
getChimeraTable = ifelse(!is.null(options$createChimeraDetectionTable), options$createChimeraDetectionTable, FALSE),
minSampleFraction = ifelse(!is.null(options$chimeraDetectionMinSampleFraction), options$chimeraDetectionMinSampleFraction, 0.9),
ignoreNegatives = ifelse(!is.null(options$chimeraDetectionIgnoreNegatives), options$chimeraDetectionIgnoreNegatives, 1),
minFoldParentOverAbundance = ifelse(!is.null(options$chimeraDetectionMinFoldParentOverabundance), options$chimeraDetectionMinFoldParentOverabundance, 1.5),
detectionAbundance = ifelse(!is.null(options$chimeraDetectionParentAbundance), options$chimeraDetectionParentAbundance, 2),
allowOneOff = ifelse(!is.null(options$chimeraDetectionAllowOneOff), options$chimeraDetectionAllowOneOff, FALSE),
maxShift = ifelse(!is.null(options$chimeraDetectionMaxShift), options$chimeraDetectionMaxShift, 16)),
refDatabase = options$taxDatabase,
minBootstrap = ifelse(!is.null(options$assignTaxMinBootstrap), options$assignTaxMinBootstrap, 50),
tryComplement = ifelse(!is.null(options$assignTaxTryComplement), options$assignTaxTryComplement, FALSE),
showBootstraps = ifelse(!is.null(options$assignTaxOutputBootstraps), options$assignTaxOutputBootstraps, FALSE),
taxLevels = ifelse(!is.null(options$assignTaxLevels), options$assignTaxLevels, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")),
verbose = ifelse(!is.null(options$verbose), options$verbose, FALSE),
multithread = ifelse(!is.null(options$multithread), options$multithread, FALSE))
else {
stop("Invalid input provided for type parameter")
}
}
else if (type == "filter" | "filter %in% type) & !isPaired) {
if (length(type) == 1) {
temp <- setFastFilter(inDir = options$pathToData,
outDir = options$outDir,
filtVerbose = ifelse(!is.null(options$verbose), options$verbose, FALSE),
prefix = ifelse(!is.null(options$projectPrefix), options$projectPrefix, "myproject"),
maxEE = ifelse(!is.null(options$filtMaxEE), options$filtMaxEE, c(2.5, 2.5)),
truncQ = ifelse(!is.null(options$filtTruncQ), options$filtTruncQ, c(0, 0)),
truncLen = ifelse(!is.null(options$filtTruncLen), options$filtTruncLen, c(0, 0)),
trimLeft = ifelse(!is.null(options$filtTrimLeft), options$filtTrimLeft, c(0, 0)),
trimRight = ifelse(!is.null(options$filtTrimRight), options$filtTrimRight, c(0, 0)),
matchIDs = ifelse(!is.null(options$filtMatchIDs), options$filtMatchIDs, FALSE),
minLen = ifelse(!is.null(options$filtMinLen), options$filtMinLen, c(50, 50)),
isPaired = TRUE,
multithread = ifelse(!is.null(options$multithread), options$multithread, FALSE))
}
else if ("auto" %in% type & length(type) == 2) {
temp <- setFastSingle(inDir = options$pathToData,
outDir = options$outDir,
verbose = ifelse(!is.null(options$verbose), options$verbose, FALSE),
prefix = ifelse(!is.null(options$projectPrefix), options$projectPrefix, "myproject"),
isPaired = FALSE,
derepN = ifelse(!is.null(options$derepN), options$derepN, FALSE),
getErrPDF = ifelse(!is.null(options$saveErrorsPlot), options$saveErrorsPlot, FALSE),
errN = ifelse(!is.null(options$errN), options$errN, 1e+08),
multithread = ifelse(!is.null(options$multithread), options$multithread, FALSE),
dadaBandSize = ifelse(!is.null(options$dadaBandSize), options$dadaBandSize, 16),
dadaOmegaA = ifelse(!is.null(options$dadaOmegaA), options$dadaOmegaA, 1e-40),
getChimeraTable = ifelse(!is.null(options$createChimeraDetectionTable), options$createChimeraDetectionTable, FALSE),
minSampleFraction = ifelse(!is.null(options$chimeraDetectionMinSampleFraction), options$chimeraDetectionMinSampleFraction, 0.9),
ignoreNegatives = ifelse(!is.null(options$chimeraDetectionIgnoreNegatives), options$chimeraDetectionIgnoreNegatives, 1),
minFoldParentOverAbundance = ifelse(!is.null(options$chimeraDetectionMinFoldParentOverabundance), options$chimeraDetectionMinFoldParentOverabundance, 1.5),
detectionAbundance = ifelse(!is.null(options$chimeraDetectionParentAbundance), options$chimeraDetectionParentAbundance, 2),
allowOneOff = ifelse(!is.null(options$chimeraDetectionAllowOneOff), options$chimeraDetectionAllowOneOff, FALSE),
maxShift = ifelse(!is.null(options$chimeraDetectionMaxShift), options$chimeraDetectionMaxShift, 16),
maxEE = ifelse(!is.null(options$filtMaxEE), options$filtMaxEE, c(2.5, 2.5)),
truncQ = ifelse(!is.null(options$filtTruncQ), options$filtTruncQ, c(0, 0)),
truncLen = ifelse(!is.null(options$filtTruncLen), options$filtTruncLen, c(0, 0)),
trimLeft = ifelse(!is.null(options$filtTrimLeft), options$filtTrimLeft, c(0, 0)),
trimRight = ifelse(!is.null(options$filtTrimRight), options$filtTrimRight, c(0, 0)),
matchIDs = ifelse(!is.null(options$filtMatchIDs), options$filtMatchIDs, FALSE),
minLen = ifelse(!is.null(options$filtMinLen), options$filtMinLen, c(50, 50)))
}
else {
stop("Invalid input provided for type parameter")
}
}
else if (type == "report") {
temp <- setFastReport(inDir = options$pathToData,
outDir = options$outDir,
fastqcPath = options$pathToFastqc,
installFastqc = ifelse(!is.null(options$installFastqc), options$installFastqc, FALSE),
numThreads = ifelse(!is.null(options$fastqcThreads), options$fastqcThreads, 4),
description = ifelse(!is.null(options$fastqcExperimentDescription), options$fastqcExperimentDescription, "My Project"))
}
else if (type == "seqdump") {
temp <- setFastSeqDump(sampleURLs = options$pathToSampleURLs,
outDir = options$outDir,
sampleList = options$pathToSampleIDs,
fastqDumpPath = options$pathToFastqDump)
}
else if (type == "primertrim") {
temp <- setFastPrimerTrim(inDir = options$pathToRawFastq,
outDir = options$pathToNoPrimers,
adapterList = options$listOfAdapters)
}
else if (type == "qualityplot") {
temp <- setfastPlotQuality(aggregate = ifelse(!is.null(options$aggregateQual), options$aggregateQual, TRUE),
N = ifelse(!is.null(options$qualN), options$qualN, 5e+05))
}
else {
stop("Error reading config file. Invalid inputs supplied")
}
# Return object
return(temp)
}
devtools::load_all()
devtools::load_all()
devtools::load_all()
setFastFilter <- function(inDir, outDir, filtVerbose, prefix, maxEE, truncQ, truncLen, trimLeft, trimRight, matchIDs, minLen, isPaired, multithread) {
return(TRUE)
}
temp <- setFastFilter(inDir = options$pathToData,
outDir = options$outDir,
filtVerbose = ifelse(!is.null(options$verbose), options$verbose, FALSE),
prefix = ifelse(!is.null(options$projectPrefix), options$projectPrefix, "myproject"),
maxEE = ifelse(!is.null(options$filtMaxEE), options$filtMaxEE, c(2.5, 2.5)),
truncQ = ifelse(!is.null(options$filtTruncQ), options$filtTruncQ, c(0, 0)),
truncLen = ifelse(!is.null(options$filtTruncLen), options$filtTruncLen, c(0, 0)),
trimLeft = ifelse(!is.null(options$filtTrimLeft), options$filtTrimLeft, c(0, 0)),
trimRight = ifelse(!is.null(options$filtTrimRight), options$filtTrimRight, c(0, 0)),
matchIDs = ifelse(!is.null(options$filtMatchIDs), options$filtMatchIDs, FALSE),
minLen = ifelse(!is.null(options$filtMinLen), options$filtMinLen, c(50, 50)),
isPaired = TRUE,
multithread = ifelse(!is.null(options$multithread), options$multithread, FALSE))
devtools::load_all()
devtools::load_all()
devtools::load_all()
library(testthat)
context("Parse Config File")
devtools::load_all()
devtools::load_all()
devtools::load_all()
library(testthat)
context("Parse Config File")
devtools::load_all()
devtools::load_all()
devtools::load_all()
library(testthat)
context("Parse Config File")
ifelse(!is.null(NULL), options$projectPrefix, "myproject")
devtools::load_all()
c("myproject")
context("Parse Config File")
devtools::load_all()
devtools::load_all()
devtools::load_all()
library(testthat)
context("Parse Config File")
ifelse(!is.null(NULL), options$projectPrefix, "myproject")
devtools::load_all()
library(testthat)
context("Parse Config File")
ifelse(!is.null(NULL), options$projectPrefix, "myproject")
devtools::load_all()
library(testthat)
context("Parse Config File")
ifelse(!is.null(NULL), options$projectPrefix, "myproject")
devtools::load_all()
library(testthat)
context("Parse Config File")
ifelse(!is.null(NULL), options$projectPrefix, "myproject")
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
getwd
getwd()
source("C:/Users/twuma/FettweisLab/fastq2otu/R/readConfig.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/readConfig.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/setup.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/setup.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/setup.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/setup.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/setup.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/setup.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/setup.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/setup.R")
library(testthat)
context("Parse Config File")
ifelse(!is.null(NULL), options$projectPrefix, "myproject")
devtools::load_all()
devtools::load_all()
devtools::load_all()
library(testthat)
context("Parse Config File")
ifelse(!is.null(NULL), options$projectPrefix, "myproject")
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
source("C:/Users/twuma/FettweisLab/fastq2otu/R/readConfig.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/setup.R")
packageVersion("roxygen2")
roxygen2::update_collate
source("C:/Users/twuma/FettweisLab/fastq2otu/R/setup.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/setup.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/setup.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/setup.R")
library(testthat)
context("Parse Config File")
ifelse(!is.null(NULL), options$projectPrefix, "myproject")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/readConfig.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/setup.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/setup.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/setup.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/setup.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/setup.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/setup.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/setup.R")
?readConfig
View(readConfig)
test_that("Create fastSingle object", {
object <- readConfig(config, isPaired = FALSE, type = "auto")
expect_equal(typeof(object), "fastSingle")
#expect_equal(str_length("abc"), 3)
})
config <- "C:/Users/twuma/FettweisLab/fastq2otu/inst/example-config.yml"
test_that("Create fastSingle object", {
object <- readConfig(config, isPaired = FALSE, type = "auto")
expect_equal(typeof(object), "fastSingle")
#expect_equal(str_length("abc"), 3)
})
config <- "C:/Users/twuma/FettweisLab/fastq2otu/inst/example-config.yml"
test_that("Create fastSingle object", {
object <- readConfig(config, isPaired = FALSE, type = "auto")
expect_equal(typeof(object), "fastSingle")
#expect_equal(str_length("abc"), 3)
})
test_that("Create fastSingle object", {
object <- readConfig(config, isPaired = FALSE, type = "auto")
expect_true(!is.null(object))
#expect_equal(typeof(object), "fastSingle")
#expect_equal(str_length("abc"), 3)
})
test_that("Create fastSingle object", {
object <- readConfig(config, isPaired = FALSE, type = "auto")
expect_true(!is.null(object))
#expect_equal(typeof(object), "fastSingle")
#expect_equal(str_length("abc"), 3)
})
config <- "C:/Users/twuma/FettweisLab/fastq2otu/inst/example-config.yml"
test_that("Create fastSingle object", {
object <- readConfig(config, isPaired = FALSE, type = "auto")
expect_true(!is.null(object))
#expect_equal(typeof(object), "fastSingle")
#expect_equal(str_length("abc"), 3)
})
library(testthat)
context("Parse Config File")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/readConfig.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/setup.R")
config <- "C:/Users/twuma/FettweisLab/fastq2otu/inst/example-config.yml"
test_that("Create fastSingle object", {
object <- readConfig(config, isPaired = FALSE, type = "auto")
expect_true(!is.null(object))
#expect_equal(typeof(object), "fastSingle")
#expect_equal(str_length("abc"), 3)
})
config <- "C:/Users/twuma/FettweisLab/fastq2otu/inst/example-config.yml"
options <- yaml::yaml.load_file(config)
ifelse(!is.null(options$dadaOmegaA), as.numeric(as.character(options$dadaOmegaA)), 1e-40)
as.numeric(as.character(options$dadaOmegaA))
typeof(as.numeric(as.character(options$dadaOmegaA)))
ifelse(!is.null(options$dadaOmegaA), options$dadaOmegaA, 1e-40)
config <- "C:/Users/twuma/FettweisLab/fastq2otu/inst/example-config.yml"
options <- yaml::yaml.load_file(config)
ifelse(!is.null(options$dadaOmegaA), options$dadaOmegaA, 1e-40)
options$dadaOmegaA
as.vector(options$dadaOmegaA)
as.numeric(as.character(options$dadaOmegaA))
l <-  as.numeric(as.character(options$dadaOmegaA))
test_that("Create fastSingle object", {
object <- readConfig(config, isPaired = FALSE, type = "auto")
expect_true(!is.null(object))
#expect_equal(typeof(object), "fastSingle")
#expect_equal(str_length("abc"), 3)
})
ifelse(!is.null(options$dadaOmegaA), options$derepN, FALSE)
source("C:/Users/twuma/FettweisLab/fastq2otu/R/readConfig.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/setup.R")
config <- "C:/Users/twuma/FettweisLab/fastq2otu/inst/example-config.yml"
options <- yaml::yaml.load_file(config)
ifelse(!is.null(options$dadaOmegaA), options$derepN, FALSE)
ifelse(!is.null(options$dadaOmegaA), as.numeric(as.character(options$dadaOmegaA)), 1e-40)
l <-  as.numeric(as.character(options$dadaOmegaA))
test_that("Create fastSingle object", {
object <- readConfig(config, isPaired = FALSE, type = "auto")
expect_true(!is.null(object))
#expect_equal(typeof(object), "fastSingle")
#expect_equal(str_length("abc"), 3)
})
source("C:/Users/twuma/FettweisLab/fastq2otu/R/readConfig.R")
source("C:/Users/twuma/FettweisLab/fastq2otu/R/setup.R")
config <- "C:/Users/twuma/FettweisLab/fastq2otu/inst/example-config.yml"
options <- yaml::yaml.load_file(config)
ifelse(!is.null(options$dadaOmegaA), options$derepN, FALSE)
ifelse(!is.null(options$dadaOmegaA), as.numeric(as.character(options$dadaOmegaA)), 1e-40)
l <-  as.numeric(as.character(options$dadaOmegaA))
test_that("Create fastSingle object", {
object <- readConfig(config, isPaired = FALSE, type = "auto")
expect_true(!is.null(object))
#expect_equal(typeof(object), "fastSingle")
#expect_equal(str_length("abc"), 3)
})
file.exists(NULL)
file.exists("count.txt")
try(system("wget", intern = TRUE))
try(system("curl", intern = TRUE))
# Extract SRA IDs
ftp_links <- c("ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR906/ERR906000/ERR906000_2.fastq.gz", "ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR906/ERR906000/ERR906000_1.fastq.gz")
sort(list.files("ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR906/ERR906000/", pattern=".fastq", full.names = TRUE))
basename(ftp_links)
sapply(strsplit(basename(basename(ftp_links)), ".fastq"), `[`, 1)
sapply(strsplit(basename(basename(ftp_links)), "^.*[1,2]?.fastq(.gz)?$"), `[`, 1)
sapply(strsplit(basename(basename(ftp_links)), "_[1,2]?.fastq(.gz)?$"), `[`, 1)
try(system("xargs", intern = TRUE))
try(system("xargs -h", intern = TRUE))
try(system("xargs -n 1 curl -O < your_files.txt", intern = TRUE))
library(testthat)
context("Parse Config File")
source("C:/Users/twuma/OneDrive/Desktop/fastq2otu/R/readConfig.R")
source("C:/Users/twuma/OneDrive/Desktop/fastq2otu/R/setup.R")
config <- "C:/Users/twuma/OneDrive/Desktop/fastq2otu/inst/example-config.yml"
options <- yaml::yaml.load_file(config)
source("C:/Users/twuma/OneDrive/Desktop/fastq2otu/R/readConfig.R")
source("C:/Users/twuma/OneDrive/Desktop/fastq2otu/R/setup.R")
config <- "C:/Users/twuma/OneDrive/Desktop/fastq2otu/inst/example-config.yml"
options <- yaml::yaml.load_file(config)
source("C:/Users/twuma/OneDrive/Desktop/fastq2otu/R/readConfig.R")
source("C:/Users/twuma/OneDrive/Desktop/fastq2otu/R/setup.R")
config <- "C:/Users/twuma/OneDrive/Desktop/fastq2otu/inst/example-config.yml"
options <- yaml::yaml.load_file(config)
length(NA)
length("cat")
length(NULL)
length("")
source("C:/Users/twuma/OneDrive/Desktop/fastq2otu/R/readConfig.R")
source("C:/Users/twuma/OneDrive/Desktop/fastq2otu/R/setup.R")
config <- "C:/Users/twuma/OneDrive/Desktop/fastq2otu/inst/example-config.yml"
options <- yaml::yaml.load_file(config)
source("C:/Users/twuma/OneDrive/Desktop/fastq2otu/R/readConfig.R")
source("C:/Users/twuma/OneDrive/Desktop/fastq2otu/R/setup.R")
config <- "C:/Users/twuma/OneDrive/Desktop/fastq2otu/inst/example-config.yml"
options <- yaml::yaml.load_file(config)
source("C:/Users/twuma/OneDrive/Desktop/fastq2otu/R/readConfig.R")
source("C:/Users/twuma/OneDrive/Desktop/fastq2otu/R/setup.R")
config <- "C:/Users/twuma/OneDrive/Desktop/fastq2otu/inst/example-config.yml"
options <- yaml::yaml.load_file(config)
test_that("Create fastSingle object", {
object <- readConfig(config, isPaired = FALSE, type = "auto")
expect_true(!is.null(object))
})
test_that("Create fastDouble object", {
object <- readConfig(config, isPaired = TRUE, type = "auto")
expect_true(!is.null(object))
})
test_that("Create fastAssignTaxa object", {
object <- readConfig(config, type = "assignTax")
expect_true(!is.null(object))
})
test_that("Create fastReport object", {
object <- readConfig(config, type = "report")
expect_true(!is.null(object))
})
readConfig(config, type = "assignTax")
context("Parse Config File")
source("C:/Users/twuma/OneDrive/Desktop/fastq2otu/R/readConfig.R")
source("C:/Users/twuma/OneDrive/Desktop/fastq2otu/R/setup.R")
config <- "C:/Users/twuma/OneDrive/Desktop/fastq2otu/inst/example-config.yml"
options <- yaml::yaml.load_file(config)
source("C:/Users/twuma/OneDrive/Desktop/fastq2otu/R/setup.R")
v
source("C:/Users/twuma/OneDrive/Desktop/fastq2otu/R/readConfig.R")
source("C:/Users/twuma/OneDrive/Desktop/fastq2otu/R/setup.R")
source("C:/Users/twuma/OneDrive/Desktop/fastq2otu/R/setup.R")
source("C:/Users/twuma/OneDrive/Desktop/fastq2otu/R/setup.R")
library(testthat)
context("Parse Config File")
source("C:/Users/twuma/OneDrive/Desktop/fastq2otu/R/readConfig.R")
source("C:/Users/twuma/OneDrive/Desktop/fastq2otu/R/setup.R")
config <- "C:/Users/twuma/OneDrive/Desktop/fastq2otu/inst/example-config.yml"
options <- yaml::yaml.load_file(config)
readConfig(config, type = "assignTax")
source("C:/Users/twuma/OneDrive/Desktop/fastq2otu/R/readConfig.R")
source("C:/Users/twuma/OneDrive/Desktop/fastq2otu/R/setup.R")
config <- "C:/Users/twuma/OneDrive/Desktop/fastq2otu/inst/example-config.yml"
options <- yaml::yaml.load_file(config)
library(testthat)
context("Parse Config File")
source("C:/Users/twuma/OneDrive/Desktop/fastq2otu/R/readConfig.R")
source("C:/Users/twuma/OneDrive/Desktop/fastq2otu/R/setup.R")
config <- "C:/Users/twuma/OneDrive/Desktop/fastq2otu/inst/example-config.yml"
options <- yaml::yaml.load_file(config)
readConfig(configFile, type = c("auto", "seqdump"))
readConfig(config, type = c("auto", "seqdump"))
